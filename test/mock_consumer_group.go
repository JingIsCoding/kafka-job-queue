// Code generated by mockery v2.8.0. DO NOT EDIT.

package test

import (
	job "github.com/JingIsCoding/kafka_job_queue/job"
	mock "github.com/stretchr/testify/mock"

	queue "github.com/JingIsCoding/kafka_job_queue/queue"
)

// MockConsumerGroup is an autogenerated mock type for the ConsumerGroup type
type MockConsumerGroup struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockConsumerGroup) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeadJobChan provides a mock function with given fields:
func (_m *MockConsumerGroup) GetDeadJobChan() chan job.Job {
	ret := _m.Called()

	var r0 chan job.Job
	if rf, ok := ret.Get(0).(func() chan job.Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan job.Job)
		}
	}

	return r0
}

// GetDefaultJobChan provides a mock function with given fields:
func (_m *MockConsumerGroup) GetDefaultJobChan() chan job.Job {
	ret := _m.Called()

	var r0 chan job.Job
	if rf, ok := ret.Get(0).(func() chan job.Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan job.Job)
		}
	}

	return r0
}

// GetDelayedJobChan provides a mock function with given fields:
func (_m *MockConsumerGroup) GetDelayedJobChan() chan job.Job {
	ret := _m.Called()

	var r0 chan job.Job
	if rf, ok := ret.Get(0).(func() chan job.Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan job.Job)
		}
	}

	return r0
}

// GetQueue provides a mock function with given fields:
func (_m *MockConsumerGroup) GetQueue() queue.Queue {
	ret := _m.Called()

	var r0 queue.Queue
	if rf, ok := ret.Get(0).(func() queue.Queue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queue.Queue)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *MockConsumerGroup) Start() {
	_m.Called()
}
