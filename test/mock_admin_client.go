// Code generated by mockery v2.8.0. DO NOT EDIT.

package test

import (
	context "context"

	kafka "github.com/confluentinc/confluent-kafka-go/kafka"
	mock "github.com/stretchr/testify/mock"
)

// MockAdminClient is an autogenerated mock type for the AdminClient type
type MockAdminClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockAdminClient) Close() {
	_m.Called()
}

// CreateTopics provides a mock function with given fields: ctx, topics, options
func (_m *MockAdminClient) CreateTopics(ctx context.Context, topics []kafka.TopicSpecification, options ...kafka.CreateTopicsAdminOption) ([]kafka.TopicResult, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, topics)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []kafka.TopicResult
	if rf, ok := ret.Get(0).(func(context.Context, []kafka.TopicSpecification, ...kafka.CreateTopicsAdminOption) []kafka.TopicResult); ok {
		r0 = rf(ctx, topics, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.TopicResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []kafka.TopicSpecification, ...kafka.CreateTopicsAdminOption) error); ok {
		r1 = rf(ctx, topics, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigs provides a mock function with given fields: ctx, resources, options
func (_m *MockAdminClient) DescribeConfigs(ctx context.Context, resources []kafka.ConfigResource, options ...kafka.DescribeConfigsAdminOption) ([]kafka.ConfigResourceResult, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resources)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []kafka.ConfigResourceResult
	if rf, ok := ret.Get(0).(func(context.Context, []kafka.ConfigResource, ...kafka.DescribeConfigsAdminOption) []kafka.ConfigResourceResult); ok {
		r0 = rf(ctx, resources, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.ConfigResourceResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []kafka.ConfigResource, ...kafka.DescribeConfigsAdminOption) error); ok {
		r1 = rf(ctx, resources, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// createTopicsIfNotExist provides a mock function with given fields: partition, factor, topics
func (_m *MockAdminClient) createTopicsIfNotExist(partition int, factor int, topics ...string) error {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, partition, factor)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, ...string) error); ok {
		r0 = rf(partition, factor, topics...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
